var bitmaps array

var crow int
var ccolumn int

func printString(s string) {
    for i:=0; i<s.length; i++ {
        output.printChar(s.charAt(i))
    }
    return
}

func printChar(c char) {
    if c == 0x80 {
        output.println()
        return
    }
    j := c - 32
    // j = j * 8
    j = j << 3 // TODO 8x11
    uneven := ccolumn & 1
    col := ccolumn / 2
    for i:=0; i<8; i++ {
        line := bitmaps[j+i]
        if uneven == 0 {
            line = line << 8
        }
        r := crow + i
        screen.drawWord(line, r, col)
    }
    output.advanceCursor()
    return
}

func printInt(x int) {
    s := string.intString(x)
    output.printString(s)
    return
}

// advances the cursor once, spilling over to newline if needed
func advanceCursor() {
    ccolumn = ccolumn + 1
    if ccolumn == 64 {
        output.println()
    }
    return
}

func backspace() {
    if ccolumn == 0 {
        return
    }
    ccolumn = ccolumn - 1
    uneven := ccolumn & 1
    col := ccolumn / 2
    mask := 0x00ff
    if uneven == 1 {
        mask = mask << 8
    }
    for i:=0; i<8; i++ {
        r := crow + i
        screen.maskWord(mask, r, col)
    }
    return
}

func println() {
    ccolumn = 0
    crow = crow + 8 // TODO 8x11
    return
}

func init() {
    // TODO 8x11
    // TODO last line is always 0...
    bitmaps = []int{
    // space
    0,0,0,0,0,0,0,0,
    // !
    0x0030,
    0x0078,
    0x0078,
    0x0030,
    0x0030,
    0x0000,
    0x0030,
    0x0000,
    // "
    0,0,0,0,0,0,0,0,
    // #
    0,0,0,0,0,0,0,0,
    // $
    0,0,0,0,0,0,0,0,
    // %
    0,0,0,0,0,0,0,0,
    // &
    0,0,0,0,0,0,0,0,
    // '
    0,0,0,0,0,0,0,0,
    // (
    0x0018,
    0x0030,
    0x0060,
    0x0060,
    0x0060,
    0x0030,
    0x0018,
    0x0000,
    // )
    0x0060,
    0x0030,
    0x0018,
    0x0018,
    0x0018,
    0x0030,
    0x0060,
    0x0000,
    // *
    0x0000,
    0x0066,
    0x003C,
    0x00FF,
    0x003C,
    0x0066,
    0x0000,
    0x0000,
    // +
    0x0000,
    0x0030,
    0x0030,
    0x00FC,
    0x0030,
    0x0030,
    0x0000,
    0x0000,
    // ,
    0,0,0,0,0,0,0,0,
    // -
    0x0000,
    0x0000,
    0x0000,
    0x00FC,
    0x0000,
    0x0000,
    0x0000,
    0x0000,
    // .
    0,0,0,0,0,0,0,0,
    // /
    0,0,0,0,0,0,0,0,
    // 0
    0x007C,
    0x00C6,
    0x00CE,
    0x00DE,
    0x00F6,
    0x00E6,
    0x007C,
    0x0000,
    // 1
    0x0030,
    0x0070,
    0x0030,
    0x0030,
    0x0030,
    0x0030,
    0x00FC,
    0x0000,
    // 2
    0x0078,
    0x00CC,
    0x000C,
    0x0038,
    0x0060,
    0x00CC,
    0x00FC,
    0x0000,
    // 3
    0x0078,
    0x00CC,
    0x000C,
    0x0038,
    0x000C,
    0x00CC,
    0x0078,
    0x0000,
    // 4
    0x001C,
    0x003C,
    0x006C,
    0x00CC,
    0x00FC,
    0x000C,
    0x001E,
    0x0000,
    // 5 
    0x00FC,
    0x00C0,
    0x00F8,
    0x000C,
    0x000C,
    0x00CC,
    0x0078,
    0x0000,
    // 6
    0x0038,
    0x0060,
    0x00C0,
    0x00F8,
    0x00CC,
    0x00CC,
    0x0078,
    0x0000,
    // 7 
    0x00FC,
    0x00CC,
    0x000C,
    0x0018,
    0x0030,
    0x0030,
    0x0030,
    0x0000,
    // 8 
    0x0078,
    0x00CC,
    0x00CC,
    0x0078,
    0x00CC,
    0x00CC,
    0x0078,
    0x0000,
    // 9 
    0x0078,
    0x00CC,
    0x00CC,
    0x007C,
    0x000C,
    0x0018,
    0x0070,
    0x0000,
    // :
    0,0,0,0,0,0,0,0,
    // ;
    0,0,0,0,0,0,0,0,
    // <
    0x0018,
    0x0030,
    0x0060,
    0x00C0,
    0x0060,
    0x0030,
    0x0018,
    0x0000,
    // =
    0,0,0,0,0,0,0,0,
    // >
    0x0060,
    0x0030,
    0x0018,
    0x000C,
    0x0018,
    0x0030,
    0x0060,
    0x0000,
    // ?
    0,0,0,0,0,0,0,0,
    // @
    0,0,0,0,0,0,0,0,
    // A
    0x0030,
    0x0078,
    0x00CC,
    0x00CC,
    0x00FC,
    0x00CC,
    0x00CC,
    0x0000,
    // B
    0x00FC,
    0x0066,
    0x0066,
    0x007C,
    0x0066,
    0x0066,
    0x00FC,
    0x0000,
    // C
    0x003C,
    0x0066,
    0x00C0,
    0x00C0,
    0x00C0,
    0x0066,
    0x003C,
    0x0000,
    // D
    0x00F8,
    0x006C,
    0x0066,
    0x0066,
    0x0066,
    0x006C,
    0x00F8,
    0x0000,
    // E
    0x00FE,
    0x0062,
    0x0068,
    0x0078,
    0x0068,
    0x0062,
    0x00FE,
    0x0000,
    // F
    0x00FE,
    0x0062,
    0x0068,
    0x0078,
    0x0068,
    0x0060,
    0x00F0,
    0x0000,
    // G
    0x003C,
    0x0066,
    0x00C0,
    0x00C0,
    0x00CE,
    0x0066,
    0x003E,
    0x0000,
    // H
    0x00CC,
    0x00CC,
    0x00CC,
    0x00FC,
    0x00CC,
    0x00CC,
    0x00CC,
    0x0000,
    // I
    0x0078,
    0x0030,
    0x0030,
    0x0030,
    0x0030,
    0x0030,
    0x0078,
    0x0000,
    // J
    0x001E,
    0x000C,
    0x000C,
    0x000C,
    0x00CC,
    0x00CC,
    0x0078,
    0x0000,
    // K
    0x00E6,
    0x0066,
    0x006C,
    0x0078,
    0x006C,
    0x0066,
    0x00E6,
    0x0000,
    // L
    0x00F0,
    0x0070,
    0x0070,
    0x0070,
    0x0070,
    0x0077,
    0x00FE,
    0x0000,
    // M
    0x00C6,
    0x00EE,
    0x00FE,
    0x00FE,
    0x00D6,
    0x00C6,
    0x00C6,
    0x0000,
    // N
    0x00C6,
    0x00E6,
    0x00F6,
    0x00DE,
    0x00CE,
    0x00C6,
    0x00C6,
    0x0000,
    // O 
    0x0038,
    0x006C,
    0x00C6,
    0x00C6,
    0x00C6,
    0x006C,
    0x0038,
    0x0000,
    // P
    0x00FC,
    0x0066,
    0x0066,
    0x007C,
    0x0060,
    0x0060,
    0x00F0,
    0x0000,
    // Q
    0x0078,
    0x00CC,
    0x00CC,
    0x00CC,
    0x00DC,
    0x0078,
    0x001E,
    0x0000,
    // R
    0x00FC,
    0x0066,
    0x0066,
    0x007C,
    0x006C,
    0x0066,
    0x00E6,
    0x0000,
    // S
    0x0078,
    0x00CC,
    0x0060,
    0x0030,
    0x0018,
    0x00CC,
    0x0078,
    0x0000,
    // T
    0x00FC,
    0x00B4,
    0x0030,
    0x0030,
    0x0030,
    0x0030,
    0x0078,
    0x0000,
    // U
    0x00CC,
    0x00CC,
    0x00CC,
    0x00CC,
    0x00CC,
    0x00CC,
    0x00FC,
    0x0000,
    // V
    0x00CC,
    0x00CC,
    0x00CC,
    0x00CC,
    0x00CC,
    0x0078,
    0x0030,
    0x0000,
    // W
    0x00C6,
    0x00C6,
    0x00C6,
    0x00D6,
    0x00FE,
    0x00EE,
    0x00C6,
    0x0000,
    // X
    0x00C6,
    0x00C6,
    0x006C,
    0x0038,
    0x0038,
    0x007C,
    0x00C6,
    0x0000,
    // Y
    0x00CC,
    0x00CC,
    0x00CC,
    0x0078,
    0x0030,
    0x0030,
    0x0078,
    0x0000,
    // Z
    0x00FE,
    0x00C6,
    0x008C,
    0x0018,
    0x0032,
    0x0066,
    0x00FE,
    0x0000,
}
/*
    // [
    0,0,0,0,0,0,0,0,
    // \
    0,0,0,0,0,0,0,0,
    // ]
    0,0,0,0,0,0,0,0,
    // ^
    0,0,0,0,0,0,0,0,
    // _
    0,0,0,0,0,0,0,0,
    // `
    0,0,0,0,0,0,0,0,
    // a
    0,0,0,0,0,0,0,0,
    // b
    0,0,0,0,0,0,0,0,
    // c
    0,0,0,0,0,0,0,0,
    // d
    0,0,0,0,0,0,0,0,
    // e
    0,0,0,0,0,0,0,0,
    // f
    0,0,0,0,0,0,0,0,
    // g
    0,0,0,0,0,0,0,0,
    // h
    0,0,0,0,0,0,0,0,
    // i
    0,0,0,0,0,0,0,0,
    // j
    0,0,0,0,0,0,0,0,
    // k
    0,0,0,0,0,0,0,0,
    // l
    0,0,0,0,0,0,0,0,
    // m
    0,0,0,0,0,0,0,0,
    // n
    0,0,0,0,0,0,0,0,
    // o
    0,0,0,0,0,0,0,0,
    // p
    0,0,0,0,0,0,0,0,
    // q
    0,0,0,0,0,0,0,0,
    // r
    0,0,0,0,0,0,0,0,
    // s
    0,0,0,0,0,0,0,0,
    // t
    0,0,0,0,0,0,0,0,
    // u
    0,0,0,0,0,0,0,0,
    // v
    0,0,0,0,0,0,0,0,
    // w
    0,0,0,0,0,0,0,0,
    // x
    0,0,0,0,0,0,0,0,
    // y
    0,0,0,0,0,0,0,0,
    // z
    0,0,0,0,0,0,0,0,
    // {
    0,0,0,0,0,0,0,0,
    // |
    0,0,0,0,0,0,0,0,
    // }
    0,0,0,0,0,0,0,0,
    // ~
    0,0,0,0,0,0,0,0,
    }
    */
    return
}
