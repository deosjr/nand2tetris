type env struct {
    m dict
    outer env
}

var globalenv env

func init() {
    globalenv = env.new()
    // TODO env.m is nil, so first insert doesnt work
    //m := globalenv.m
    //m.insert("pi", 3) // no floats!
    var m dict
    m = dict.new("pi", 3, nil, nil)
    globalenv.m = m
    return
}

func new() env {
    e := env{}
    e.m = nil
    e.outer = nil
    return e
}

// binds all params to args. undefined if too few args. ignores extra args
// assumes params is a list of symbols
func newFromProc(params sexpr, args array, outer env) env {
    e := env{}
    e.m = nil
    e.outer = outer
    // zip p.params and args into dict m
    len := params.length()
    if len == 0 {
        return e
    }
    s := params.left
    var m dict
    m := dict.new(s.value, args[0], nil, nil)
    if len == 1 {
        e.m = m
        return e
    }
    params = params.right
    for i:=1; i<len; i++ {
        s = params.left
        params = params.right
        m.insert(s.value, args[i])
    }
    e.m = m
    return e
}

func global() env {
    return globalenv
}

func (e env) find(s string) env {
    if e == nil {
        return nil
    }
    m := e.m
    result := m.search(s)
    if result == nil { // TODO: will break if var=0 ?
        o := e.outer
        return o.find(s)
    }
    return e
}
