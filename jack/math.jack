var twoToThe array

func mult(x int, y int) int {
    sum := 0
    shiftedx := x
    for j:=0; j<16; j++ {
        if math.bit(y, j) {
            sum = sum + shiftedx
        }
        shiftedx = shiftedx + shiftedx
    }
    return sum
}

// slow unoptimised version
/*
func multBad(x int, y int) int {
    sum := 0
    // should be j:=0; j<y; j++
    // this is equivalent but matches the vm version
    for j:=y; j!=0; j-- {
        sum = sum + x
    }
    return sum
}
*/

func div(x int, y int) int {
    if y > x {
        return 0
    }
    //q := math.div(x, 2*y)
    q := y << 1
    q = x / q
    //twoq := 2*q
    twoq := q << 1
    test := twoq * y
    test = x - test
    if test < y {
        return twoq 
    }
    return twoq + 1
}

// TODO: could be done with shifts instead
func bit(x int, j int) bool {
    t := twoToThe[j]
    b := x & t
    if b == 0 {
        return false
    }
    return true
}

func mod(x int, n int) int {
    d := x / n
    d = d * n
    return x - d
}

func init() {
    twoToThe = []int{
        1, 2, 4, 8, 16, 32, 64,
        128, 256, 512, 1024, 2048,
        4096, 8192, 16384, 0,
    }
    // because 32768 overflows into a C instr
    twoToThe[15] = 32767 + 1
    return
}

