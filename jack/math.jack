var twoToThe array

// NOTE: not actually faster atm I think
func mult(x int, y int) int {
    sum := 0
    shiftedx := x
    for j:=0; j<16; j++ {
        if math.bit(y, j) {
            sum = sum + shiftedx
        }
        shiftedx = shiftedx + shiftedx
    }
    return sum
}

// slow unoptimised version
/*
func multBad(x int, y int) int {
    sum := 0
    // should be j:=0; j<y; j++
    // this is equivalent but matches the vm version
    for j:=y; j!=0; j-- {
        sum = sum + x
    }
    return sum
}
*/

// TODO: could be done with shifts instead
func bit(x int, j int) bool {
    t := twoToThe[j]
    b := x & t
    if b == 0 {
        return false
    }
    return true
}

func init() {
    twoToThe = array.new(16)
    twoToThe[0] = 1
    twoToThe[1] = 2
    twoToThe[2] = 4
    twoToThe[3] = 8
    twoToThe[4] = 16
    twoToThe[5] = 32
    twoToThe[6] = 64
    twoToThe[7] = 128
    twoToThe[8] = 256
    twoToThe[9] = 512
    twoToThe[10] = 1024
    twoToThe[11] = 2048
    twoToThe[12] = 4096
    twoToThe[13] = 8192
    twoToThe[14] = 16384
    // because 32768 overflows into a C instr
    twoToThe[15] = 32767 + 1
    return
}

