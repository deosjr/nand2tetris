// TODO once this works: use << trick to
// make strings use half the space
type string struct {
    length int
    arr  array
}

func new(maxlen int) string {
    s := string{}
    s.length = 0
    s.arr = array.new(maxlen)
    return s
}

func (s string) dispose() {
    memory.dealloc(s.arr)
    memory.dealloc(s)
    return
}

func (s string) length() int {
    return s.length
}

func (s string) charAt(j int) char {
    return s.arr[j]
}

func (s string) setCharAt(j int, c char) {
    s.arr[j] = c
    return
}

func (s string) appendChar(c char) string {
    s.arr[s.length] = c
    s.length = s.length + 1
    return s
}

func (s string) eraseLastChar() {
    s.length = s.length - 1
    return
}

func (s string) print() {
    for j:=0; j<s.length; j++ {
        print(s.arr[j])
    }
    return
}

func (s string) equals(ss string) bool {
    x := s.compare(ss)
    return x == 0
}

// return -1 if s<ss, 0 if s==ss, 1 if s>ss
// using true instead of -1 as that overflows constant...
func (s string) compare(ss string) int {
    min := s.length
    if s.length > ss.length {
        min = ss.length
    }
    for j:=0; j<min; j++ {
        d := s.arr[j] - ss.arr[j]
        if d < 0 {
            return true
        }
        if d > 0 {
            return 1
        }
    }
    if s.length < ss.length {
        return true
    }
    if ss.length < s.length {
        return 1
    }
    return 0
}
