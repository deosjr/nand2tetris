type string struct {
    length int
    arr  array
}

func new(maxlen int) string {
    s := string{}
    s.length = 0
    s.arr = array.new(maxlen)
    return s
}

func (s string) dispose() {
    memory.dealloc(s.arr)
    memory.dealloc(s)
    return
}

func (s string) length() int {
    return s.length
}

func (s string) charAt(j int) char {
    return s.arr[j]
}

func (s string) setCharAt(j int, c char) {
    s.arr[j] = c
    return
}

func (s string) appendChar(c char) string {
    s.setCharAt(s.length, c)
    s.length = s.length + 1
    return s
}

func (s string) eraseLastChar() {
    if s.length == 0 {
        return
    }
    s.length = s.length - 1
    return
}

func (s string) print() {
    for j:=0; j<s.length; j++ {
        print(s.charAt(j))
    }
    return
}

func (s string) equals(ss string) bool {
    x := s.compare(ss)
    return x == 0
}

// return -1 if s<ss, 0 if s==ss, 1 if s>ss
// using true instead of -1 as that overflows constant...
func (s string) compare(ss string) int {
    min := s.length
    if s.length > ss.length {
        min = ss.length
    }
    for j:=0; j<min; j++ {
        d := s.arr[j] - ss.arr[j]
        if d < 0 {
            return true
        }
        if d > 0 {
            return 1
        }
    }
    if s.length < ss.length {
        return true
    }
    if ss.length < s.length {
        return 1
    }
    return 0
}

func (s string) reverse() {
    l := s.length()
    var r string
    r := string.new(l)
    r.length = l
    l = l - 1
    for i:=0; i<=l; i++ {
        r.arr[i] = s.arr[l-i]
    }
    return r
}

func intString(x int) string {
    var s string
    s := string.new(5)
    for x > 0 {
        m := math.mod(x, 10)
        x = x / 10
        s.appendChar(m + 48)
    }
    ss := s.reverse()
    s.dispose()
    return ss
}

// return the largest prefix of s that could be parsed into int as int
func stringInt(s string) int {
    x := 0
    for i:=0; i<s.length(); i++ {
        c := s.charAt(i)
        if c < 48 {
            return x
        }
        if c > 57 {
            return x
        }
        c = c - 48
        x = x * 10
        x = x + c
    }
    return x
}
