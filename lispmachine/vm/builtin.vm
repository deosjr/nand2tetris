// TODO: make variadic, just have to check emptylist in a loop
function add
    push argument
    car
    push argument
    cdr
    car
    add
    // NOTE: primitives are prefixed with 010
    push constant 8191  // 0x1fff
    and
    push constant 16384 // 0x4000
    or
    return

function sub
    push argument
    car
    push argument
    cdr
    car
    sub
    // NOTE: primitives are prefixed with 010
    push constant 8191  // 0x1fff
    and
    push constant 16384 // 0x4000
    or
    return

function gt
    push argument
    car
    push argument
    cdr
    car
    gt
    return

function isnull
    push argument
    car
    is-emptylist
    return

function cons
    push argument
    car
    push argument
    cdr
    car
    cons
    return

function car
    push argument
    car
    car
    return

function cdr
    push argument
    car
    cdr
    return

function begin
label beginloop
    push argument
    cdr
    is-emptylist
    if-goto beginend
    push argument
    cdr
    pop argument
    goto beginloop
label beginend
    push argument
    car
    return

function write
    push argument
    car
    write
    push constant 0
    return

// (eval env e)
function eval
    push argument
    call eval.eval
    return

function apply
    push constant 0     // prepare local 0 = f
    push constant 0     // prepare local 1 = f.params
    push constant 0     // prepare local 2 = args
    push constant 0     // prepare local 3 = numargs
    push argument
    car
    is-builtin
    if-goto callbuiltin
// label userdefined
    // remove mask
    push argument
    car
    push constant 8191  // 0x1fff
    and
    pop local 0
    // zip f.params with args
    push local 0
    cdr
    car                 // f.params
    pop local 1
    push argument
    cdr
    car                 // args
    pop local 2
label applyrec
    // TODO: check if len(params) == len(args)
    push local 1
    is-emptylist
    if-goto endapplyrec
    push local 3
    push constant 1
    add
    pop local 3         // numargs++
    push local 1 
    car
    push local 2
    car
    cons
    push local 1
    cdr
    pop local 1
    push local 2
    cdr
    pop local 2
    goto applyrec
label endapplyrec
    // cons on top of f.env -> newenv
    push local 0
    car                 // f.env
label applyconsloop
    push constant 0
    push local 3
    eq
    if-goto applyend
    cons
    push local 3
    push constant 1
    sub
    pop local 3
    goto applyconsloop
label applyend
    // call eval.eval of newenv and f.body
    push local 0
    cdr
    cdr
    car                 // f.body
    push constant 8192  // 0x2000 = emptylist
    cons
    cons
    call eval.eval
    return
label callbuiltin
    push argument
    cdr
    car
    push argument
    car
    call-builtin
    return
