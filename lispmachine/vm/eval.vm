// (eval env e) -> evaluation of e in env, or NIL if error
// only user of the stack vm abstraction!
// NOTE env is an argument, not ENV.
// TODO: if first argument is not an env assoc list (how?), use *ENV instead
function eval
    push constant 0     // prepare local 0 = e  // TODO: no longer needed?
    push constant 0     // prepare local 1 = evaluated procedure
    push constant 0     // prepare local 2 = num args
    push constant 0     // prepare local 3 = f.params
label evalstart
    push constant 1
    car                 // SP
    push constant 2047  // 0x0800 - 1, end of stack
    gt
    if-goto sys.stackoverflow
    push constant 4
    car                 // FREE
    push constant 16383 // 0x4000 - 1, end of heap
    gt
    if-goto sys.heapoverflow
    push constant 0
    pop local 2         // reset numargs if needed
    push argument
    is-procedure
    if-goto evalself
    push argument
    is-symbol
    if-goto evalsymbol
    push argument
    is-primitive
    if-goto evalself
    // guaranteed to be a pair!
label evalpair
    push environment
    push argument
    car
    call eval.eval
    pop local 1
    push local 1        // evalled procedure
    is-procedure
    if-goto evalprocedure
    // attempt to apply non-procedure
    goto sys.errapplynonproc
label evalself
    push argument
    return
label evalsymbol
    push environment
    push argument
    cons-on-empty
    cons
    push label builtin.assq
    builtin
    call-builtin
    pop local 2
    push local 2
    push constant 0
    eq
    // symbol not found
    // TODO: broken!
    if-goto sys.errsymbolnotfound
    push local 2
    return
label evalprocedure
    push local 1
    is-special
    if-goto evalspecial
label evalargs
    // we will need to build ( evaluatedargs ... )
    // on the stack, then call the evaluated func with those args
    // this is an implementation of (map eval ...)
    push argument
    cdr
    // if emptylist, we ran out of args
    is-emptylist
    if-goto evalfunc
    push local 2
    push constant 1
    add
    pop local 2         // numargs++
    push argument
    cdr
    pop argument
    push environment
    push argument
    car
    call eval.eval      // returns evalled arg, or NIL if error
    goto evalargs
label evalfunc
    push constant 0     // NIL = emptylist  // TODO: move to label apply?
// cons numargs times
label consloop
    push constant 0
    push local 2
    eq
    if-goto apply
    cons
    push local 2
    push constant 1
    sub
    pop local 2
    goto consloop
// actually call the function stored in local 1
label apply
    pop local 2
    push constant 0     // set local 0 to 0
    pop local 0         // prepare local 0 = numargs
    push local 1
    is-builtin
    if-goto callbuiltin
// label userdefined
    // remove mask
    push local 1
    push constant 8191  // 0x1fff
    and
    pop local 1
    // zip f.params with args
    push local 1
    cadr                // f.params
    pop local 3
label applyrec
    // TODO: check if len(params) == len(args)
    push local 3
    is-emptylist
    if-goto endapplyrec
    push local 0
    push constant 1
    add
    pop local 0         // numargs++
    push local 3 
    car
    push local 2 
    car
    cons
    push local 2
    cdr
    pop local 2
    push local 3
    cdr
    pop local 3
    goto applyrec
label endapplyrec
    // cons on top of f.env -> newenv
    push local 1
    car                 // f.env
label applyconsloop
    push constant 0
    push local 0
    eq
    if-goto applyend
    cons
    push local 0
    push constant 1
    sub
    pop local 0
    goto applyconsloop
label applyend
    pop environment
    // call eval.eval of newenv and f.body
    push local 1
    caddr               // f.body
    pop argument
    goto evalstart
label callbuiltin
    push local 2
    push local 1
    call-builtin
    return
label evalspecial
    push argument
    cdr
    pop argument        // at this point, we no longer care about car of e
    // remove mask
    push local 1
    push constant 8191  // 0x1fff
    and
    pop local 1
    push local 1
    push constant 0
    eq
    if-goto evalif
    push local 1
    push constant 1
    eq
    if-goto evaldefine
    push local 1
    push constant 2
    eq
    if-goto evalquote
    push local 1
    push constant 3
    eq
    if-goto evalset
    push local 1
    push constant 4
    eq
    if-goto evallambda
    // unknown builtin, return err
    goto sys.errunknownbuiltin
label evalif
    push environment
    push argument
    car                 // test
    call eval.eval
    push constant 0
    equal
    if-goto evalalt
// label evalconseq
    push argument
    cadr                // conseq
    pop argument
    goto evalstart
label evalalt
    // TODO: if no alt, return 'false'
    push argument
    caddr               // alt
    pop argument
    goto evalstart
label evaldefine
    // TODO: this just adds, doesnt check if already exists in env
    // meaning currently the assoc list could have duplicate keys
    push argument
    car                 // symbol
    // TODO: if not symbol, error!
    push environment
    push argument
    cadr                // exp
    call eval.eval
    cons                // (symbol . (eval exp)) = entry
    // we need to modify the env pointer, because ENV will be restored
    // to whatever the caller's ENV was
    // first we duplicate existing env pointer on heap
    // then we repoint original pointer to ( entry . duplicatepointer )
    push environment
    car
    push environment
    cdr
    cons                // allocate another cons cell to current env
    cons                // ( entry . duplicatepointer )
    // TODO: difference between caller ENV and argument env ?
    push environment    // original env
    copy-pointer
    // cleanup duplicate cons cell on the heap should happen due to GC at some point
    push constant 0
    return
label evalquote
    push argument
    car
    return
label evalset
    // TODO
label evallambda
    // (lambda (params ...) body)
    // assumption: params is a list of symbols
    // TODO: typecheck param arg and check length of args=2
    push environment
    push argument
    cons
    userdefined
    return
