// BUILTIN SYS FUNCTIONS
// BUILTIN FUNCTIONS
// RULES: may use R5-R10 as local vars
// may not call into any other function
// SP-1 contains ARG, always a list
// call-by-ref: dont ever change contents of ARG
// R15 contains the return address
(BUILTINADD)
    @SP
    A=M-1
    A=M
    MCAR
    @R5     // use R5 as dump var
    M=D
    @SP
    A=M-1
    A=M
    ACDR
    MCAR
    @R5
    D=D+M
    @0x1fff
    D=D&A
    @0x4000
    D=D|A
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINSUB)
    @SP
    A=M-1
    A=M
    MCAR
    @R5     // use R5 as dump var
    M=D
    @SP
    A=M-1
    A=M
    ACDR
    MCAR
    @R5
    D=M-D
    @0x1fff
    D=D&A
    @0x4000
    D=D|A
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINEQ)
    @SP
    A=M-1
    A=M
    MCAR
    @R5     // use R5 as dump var
    M=D
    @SP
    A=M-1
    A=M
    ACDR
    MCAR
    @R5
    D=M-D
    M=0
    @BUILTINEQFALSE
    D;JNE
    @R5
    M=!M
(BUILTINEQFALSE)
    @R5
    D=M
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINGT)
    @SP
    A=M-1
    A=M
    MCAR
    @R5     // use R5 as dump var
    M=D
    @SP
    A=M-1
    A=M
    ACDR
    MCAR
    @R5
    D=M-D
    M=0
    @BUILTINGTFALSE
    D;JLE
    @R5
    M=!M
(BUILTINGTFALSE)
    @R5
    D=M
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINAND)
    @SP
    A=M-1
    A=M
    MCAR
    @R5     // use R5 as dump var
    M=D
    @SP
    A=M-1
    A=M
    ACDR
    MCAR
    @R5
    D=D&M
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINOR)
    @SP
    A=M-1
    A=M
    MCAR
    @R5     // use R5 as dump var
    M=D
    @SP
    A=M-1
    A=M
    ACDR
    MCAR
    @R5
    D=D|M
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINNOT)
    @SP
    A=M-1
    A=M
    MCAR
    @SP
    A=M-1
    M=!D
    @R15
    A=M
    0;JMP
(BUILTINBITWISEAND)
    @SP
    A=M-1
    A=M
    MCAR
    @R5     // use R5 as dump var
    M=D
    @SP
    A=M-1
    A=M
    ACDR
    MCAR
    @R5
    D=D&M
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINLEFTSHIFT)
    @SP
    A=M-1
    A=M
    ACDR
    MCAR
    @0x1fff
    D=D&A   // todo: make sure its a number?
    D=D-1   // << 0 is not supported
    @BUILTINSHLI
    D;JEQ
    @BUILTINSHLII
    D=D-1;JEQ
    @BUILTINSHLIII
    D=D-1;JEQ
    @BUILTINSHLIV
    D=D-1;JEQ
    @BUILTINSHLV
    D=D-1;JEQ
    @BUILTINSHLVI
    D=D-1;JEQ
    @BUILTINSHLVII
    D=D-1;JEQ
    @BUILTINSHLVIII
    D=D-1;JEQ
    @BUILTINSHLIX
    D=D-1;JEQ
    @BUILTINSHLX
    D=D-1;JEQ
    @BUILTINSHLXI
    D=D-1;JEQ
    @BUILTINSHLXII
    D=D-1;JEQ
    @BUILTINSHLXIII
    D=D-1;JEQ
    @BUILTINSHLXIV
    D=D-1;JEQ
    @BUILTINSHLXV
    D=D-1;JEQ
    // todo: or error!
(BUILTINSHLI)
    @SP
    A=M-1
    A=M
    MCAR
    D=D<<1
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINSHLII)
    @SP
    A=M-1
    A=M
    MCAR
    D=D<<2
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINSHLIII)
    @SP
    A=M-1
    A=M
    MCAR
    D=D<<3
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINSHLIV)
    @SP
    A=M-1
    A=M
    MCAR
    D=D<<4
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINSHLV)
    @SP
    A=M-1
    A=M
    MCAR
    D=D<<5
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINSHLVI)
    @SP
    A=M-1
    A=M
    MCAR
    D=D<<6
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINSHLVII)
    @SP
    A=M-1
    A=M
    MCAR
    D=D<<7
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINSHLVIII)
    @SP
    A=M-1
    A=M
    MCAR
    D=D<<8
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINSHLIX)
    @SP
    A=M-1
    A=M
    MCAR
    D=D<<9
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINSHLX)
    @SP
    A=M-1
    A=M
    MCAR
    D=D<<10
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINSHLXI)
    @SP
    A=M-1
    A=M
    MCAR
    D=D<<11
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINSHLXII)
    @SP
    A=M-1
    A=M
    MCAR
    D=D<<12
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINSHLXIII)
    @SP
    A=M-1
    A=M
    MCAR
    D=D<<13
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINSHLXIV)
    @SP
    A=M-1
    A=M
    MCAR
    D=D<<14
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINSHLXV)
    @SP
    A=M-1
    A=M
    MCAR
    D=D<<15
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINISNULL)
    @SP
    A=M-1
    A=M
    MCAR
    ISEMPTY
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINCAR)
    @SP
    A=M-1
    A=M
    ACAR
    MCAR
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINCDR)
    @SP
    A=M-1
    A=M
    ACAR
    MCDR
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINCONS)
    @SP
    A=M-1
    A=M
    ACDR
    MCAR
    @FREE
    A=M
    SETCDR
    @SP
    A=M-1
    A=M
    MCAR
    @FREE
    A=M
    SETCAR
    @FREE
    D=M
    M=D+1
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINREADCHAR)
    // read-char reads next char from input port
    @0x6001
    DM=M
    @0x4000
    D=D|A
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINPEEKCHAR)
    // peek-char reads next char from input port but doesnt consume
    @0x6001
    D=M
    @0x4000
    D=D|A
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINDISPLAY)
    // display writes to output port raw
    @SP
    A=M-1
    A=M
    MCAR
    @0x6002
    M=D
    @SP
    A=M-1
    M=0
    @R15
    A=M
    0;JMP
(BUILTINWRITECHAR)
    // write-char writes char to output port
    @SP
    A=M-1
    A=M
    MCAR
    @0x1fff
    D=D&A
    @0x6002
    M=D
    @SP
    A=M-1
    M=0
    @R15
    A=M
    0;JMP
(BUILTINMAKESYMBOL)
    @SP
    A=M-1
    A=M
    MCAR
    @0x1fff
    D=D&A
    @0x6000
    D=D|A
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINERROR)
    // for now, error prints code and terminates program
    // meaning this is more like builtin.fatal!
    @SP
    A=M-1
    A=M
    MCAR
    @0x1fff
    D=D&A
    @0x6002
    M=D
    @SYSEND
    0;JMP
(BUILTINASSQ)
    @SP
    A=M-1
    A=M
    MCAR
    @R5
    M=D         // R5 = assoclist
    @SP
    A=M-1
    A=M
    ACDR
    MCAR
    @R6
    M=D         // R6 = key
(BUILTINASSQSTART)
    // ASSQ is _the_ hot loop of the entire program
    @R5
    A=M
    ACAR
    MCAR
    @R6
    EQLM
    @BUILTINASSQFOUND
    D;JNE
    @R5
    A=M
    EMPTYCDR
    @BUILTINASSQFAIL
    !D;JEQ
    @R5
    A=M
    MCDR
    @R5
    M=D
    @BUILTINASSQSTART
    0;JMP
(BUILTINASSQFOUND)
    @R5
    A=M
    ACAR
    MCDR
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINASSQFAIL)
    @SP
    A=M-1
    M=-1        // TODO: return error instead of -1
    @R15        // can't set symbol to -1 now!
    A=M
    0;JMP
// duplicate of ASSQ, but returns cons cell index
// instead of cdr of cons cell found, for use in set!
// TODO: merge into builtin.ASSQ ?
(BUILTINASSX)
    @SP
    A=M-1
    A=M
    MCAR
    @R5
    M=D         // R5 = assoclist
    @SP
    A=M-1
    A=M
    ACDR
    MCAR
    @R6
    M=D         // R6 = key
(BUILTINASSQSTARTX)
    @R5
    A=M
    ACAR
    MCAR
    @R6
    EQLM
    @BUILTINASSQFOUNDX
    D;JNE
    @R5
    A=M
    EMPTYCDR
    @BUILTINASSQFAILX
    !D;JEQ
    @R5
    A=M
    MCDR
    @R5
    M=D
    @BUILTINASSQSTARTX
    0;JMP
(BUILTINASSQFOUNDX)
    @R5
    A=M
    MCAR
    @SP
    A=M-1
    M=D
    @R15
    A=M
    0;JMP
(BUILTINASSQFAILX)
    @SP
    A=M-1
    M=-1        // TODO: return error instead of -1
    @R15
    A=M
    0;JMP
